# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: "Ubuntu 16.04"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "8.x"
    displayName: "Install Node.js"

  - task: jessehouwing.jessehouwing-vsts-variable-tasks.vsts-variable-transform.VariableTransformTask@1
    displayName: "Transform value $(Build.SourceBranch) and assign to variable: SmartBrancheName"
    inputs:
      value: "$(Build.SourceBranch)"
      variableName: SmartBranchName
      searchReplace: true
      searchValue: refs/heads/
      trim: true
      slice: false
      substring: false
      casing: false
      pad: false

  - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
    displayName: "Prepare analysis on SonarCloud"
    inputs:
      SonarCloud: "axa-group.radar"
      organization: "axa-group"
      projectKey: "axa-group_radar"
      projectName: radar
      extraProperties: |
        sonar.exclusions=**/*.spec.ts,**/*.spec.tsx,**/*.stories.tsx,**/coverage/**,Scripts/**,**/*.scss,**/__snapshots__/**,**/*[Tt]ests.cs,**/node_modules/**,**/ClientApp/build/**,**/ClientApp/.storybook/**,**/obj/**,**/__mocks__/**,**/ClientApp/src/serviceWorker.ts
        sonar.typescript.lcov.reportPaths=ClientApp/coverage/lcov.info
        sonar.cs.opencover.reportsPaths=**/opencover.xml
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'), eq(variables['Build.Reason'], 'PullRequest'))

  - task: Npm@1
    displayName: "npm install"
    inputs:
      workingDir: src/RadarTechno/ClientApp
      verbose: false

  - task: Npm@0
    displayName: "npm test"
    inputs:
      cwd: src/RadarTechno/ClientApp
      command: test
      arguments: "-- --coverage --runInBand"

  - task: Npm@0
    displayName: "npm ts"
    inputs:
      cwd: src/RadarTechno/ClientApp
      command: run
      arguments: ts

  - task: DotNetCoreInstaller@0
    displayName: "Use .NET Core sdk 3.1.202"
    inputs:
      version: 3.1.202
      
  - task: DotNetCoreCLI@2
    displayName: "dotnet build"
    inputs:
      projects: "**/*.csproj"
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: "dotnet test"
    inputs:
      command: test
      projects: "**/*tests.csproj"
      arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage/opencover.xml"'
      
  - task: Npm@1
    displayName: "npm install"
    inputs:
      workingDir: ''
      verbose: false
    condition: and(succeeded(), ne(variables['App.Version'], 'none'), eq(variables['System.PullRequest.IsFork'], 'False'))

  - script: |
      git config --global user.email "build-ci@axa.fr"
      git config --global user.name "Build-CI"
      git reset --hard
      git remote set-url origin https://$(Github.Token)@github.com/axa-group/radar.git
      git checkout $(SmartBranchName)
      git status
    displayName: 'configuration'
    condition: and(succeeded(), ne(variables['App.Version'], 'none'), eq(variables['System.PullRequest.IsFork'], 'False'))

  - script: |
      npm version $(App.Version)
      git push --tags
    displayName: ' npm version $(App.Version)'
    condition: and(succeeded(), ne(variables['App.Version'], 'none'), eq(variables['System.PullRequest.IsFork'], 'False'))
      
  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.2.207'
    inputs:
      version: 2.2.207
    enabled: true

  - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
    displayName: "Run Code Analysis"
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
    displayName: "Publish Quality Gate Result"
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: GitVersion@5
    inputs:
      runtime: 'core'
      updateAssemblyInfo: true

  - script: node ./scripts/publish-changelog.js $(Github.Token)
    displayName: 'push changelog'
    condition: and(succeeded(), ne(variables['App.Version'], 'none'), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 3.1.202'
    inputs:
      version: 3.1.202
    enabled: true

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: True
      arguments: "--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) -f netcoreapp3.1 /p:AssemblyVersion=$(GitVersion.AssemblySemVer)"
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: $(Build.DefinitionName)-Artifact"
    inputs:
      ArtifactName: "$(Build.DefinitionName)-Artifact"
      
  - script: node ./scripts/twitter.js $(Twitter.consumer_key) $(Twitter.consumer_secret) $(Twitter.access_token) $(Twitter.access_token_secret)
    displayName: 'Auto tweet'
    condition: and(succeeded(), ne(variables['App.Version'], 'none'), eq(variables['System.PullRequest.IsFork'], 'False'))
    